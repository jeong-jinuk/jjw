remove.packages("readxl")
install.packages("readxl",dependencies = TRUE)
yes
install.packages("readxl",dependencies = TRUE)
remove.packages("readxl")
.libPaths("readxl")
.libPaths()
# 패키지 로딩하기 : library(package_name)
# 패키지에 있는 기능을 메모리에 올리는 기능을 함.
# Rstudio가 실행되는 동안 한번만 실행하면 됨.
library(readxl)
remove.packages("readxl")
install.packages("readxl",dependencies = TRUE)
# 패키지 로딩하기 : library(package_name)
# 패키지에 있는 기능을 메모리에 올리는 기능을 함.
# Rstudio가 실행되는 동안 한번만 실행하면 됨.
library(readxl)
reading <- read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
install.packages("rlang")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.2.2.tar.gz", repo=NULL, type="source")
remove.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.2.2.tar.gz", repo=NULL, type="source")
remove.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.2.2.tar.gz")
reading <- readxl::read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
View(reading)
# 패키지 설치하기와 로딩하기 ----
install.packages("readxl")
install.packages("readxl")
library(readxl)
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 썻다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
install.packages("rlang")
version
sessionInfo()
remove.packages("tidyverse")
remove.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 썻다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.0.tar.gz",repos = NULL,type = "source")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 썻다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
sessionInfo()
version
# 패키지 로딩하기 : library(package_name)
# 패키지에 있는 기능을 메모리에 올리는 기능을 함.
# Rstudio가 실행되는 동안 한번만 실행하면 됨.
library(readxl)
reading <- readxl::read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
install.packages("rlang")
install.packages("readxl")
install.packages("rlang")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
find.package("rlang")
find.package("readxl")
find.package("hms")
install.packages("hms")
install.packages("digest")
find.package("digest")
remove.packages("tidyverse")
remove.packages("readxl")
find.package("readxl")
install.packages("rlang")
remove.packages("rlang")
remove.packages("hms")
remove.packages("digest")
source("https://www.bioconductor.org/biocLite.R")
.libPaths()
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
install.packages("readxl")
install.packages("rlang")
install.packages("readxl")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("readxl")
install.packages("readxl")
.libPaths()
library(readxl)
reading <- readxl::read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
install.packages("rlang")
reading <- readxl::read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
library(readxl)
reading <- readxl::read_excel(path = "/Users/jeongjin-uk/Documents/R-kisti/reading.xlsx",
sheet = "Sheet1", col_names = TRUE)
install.packages("readxl")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
install.packages("rlang")
install.packages("hms")
install.packages("digest")
install.packages("digest")
install.packages("readxl")
install.packages("rlang")
remove.packages("readxl")
remove.packages("tidyverse")
remove.packages("rlang")
remove.packages("hms")
remove.packages("digest")
find.package("readxl")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
install.packages("readxl")
install.packages("rlang")
find.package("readxl")
find.package("hms")
find.package("digest")
install.packages("digest")
sessionInfo()
install.packages("readxl")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
find.package("readxl")
find.package("hms")
sessionInfo()
find.package("digest")
remove.packages("rlang")
remove.packages("rlang")
remove.packages("readxl")
remove.packages("tidyverse")
install.packages("readxl")
install.packages("readxl")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("R")
install.packages("readxl")
remove.packages("readxl")
install.packages("readxl")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("readxl")
install.packages("rlang")
source('~/Documents/R-kisti/day2 - 2019.10.31(2).R', encoding = 'EUC-KR', echo=TRUE)
install.packages("utils")
install.packages("utils")
version
find.package("readxl")
find.package("hms")
find.package("digest")
sessionInfo()
sessionInfo()
install.packages("tidyverse")
install.packages("tidyverse")
find.package("hms")
install.packages("hms")
find.package("readxl")
find.package("hms")
find.package("digest")
find.package("rlang")
remove.packages("rlang")
.libPaths()
install.packages("rlang")
install.packages("hms")
install.packages("digest")
# 패키지 설치하기와 로딩하기 ----
# 이미 설치된 경우나 사용중인 경우에도 맨 위에 쓰는 이유는
# 이 스크립트에서 이런 패키지를 ???다는 정보를 줄 뿐만 아니라
# 스크립트가 독립적으로 다른곳에 보내졌을때 패키지 설치를 용이하게 하기 위함이다.
install.packages("tidyverse")
library(tidyverse)
diamonds
install.packages(c("e1071", "writexl"))
install.packages("writexl")
# 12. 메모리에 있는 데이터 삭제하기. ----
# (1) rm(data1,data2,...)
# (2) rm(list =ls())
# 모두 삭제하므로 하드에 우선적으로 저장한 뒤 삭제 실행.
rm(list = ls())
#작업공간 ----
setwd("/Users/jeongjin-uk/Documents/R-kisti")
getwd()
# 1.2 그래프 ----
# (1) 막대그래프
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar()
# 그림영역 : theme_xxxx()
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar(fill = "red") +
ggplot2::theme_dark()
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar(fill = "red")
# (4) 기타 : 최소값, 최대값.
diamonds %>%
dplyr::summarise(Min = min(carat),
Max = max(carat))
# 14.2 왼쪽/오른쪽(1) ----
diamonds %>%
dplyr::slice(1:5) %>%
dplyr::mutate(id = 1:5) %>%
dplyr::select(id,cut,carat) -> d4
diamonds %>%
dplyr::slice(1:5) %>%
dplyr::select(x:z) -> d5
d6 <- cbind(d4,d5)
d6
#작업공간 ----
setwd("/Users/jeongjin-uk/Documents/R-kisti")
getwd()
# 제목 편집 : theme()
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar(fill = "black") +
ggplot2::theme_classic() +
ggplot2::labs(title = "Quality of Diamonds",
x     = "Cut",
y     = "Frequency") +
ggplot2::theme(plot.title = element_text(size = 20,
color = "green",
face = "bold",
hjust = 0.5),
axis.title.x = element_text(size = 15,
color = "brown2",
face = "italic",
hjust = 0.5),
axis.title.y = element_text(size = 15,
color = "brown3",
face = "bold.italic",
vjust = 0.5,
angle = 0)) +
ggplot2::ggsave(filename = "cut.jpeg",width = 10,height = 10)
rm(ls())
# 12. 메모리에 있는 데이터 삭제하기. ----
# (1) rm(data1,data2,...)
# (2) rm(list =ls())
# 모두 삭제하므로 하드에 우선적으로 저장한 뒤 삭제 실행.
rm(list = ls())
library(readxl)
library(tidyverse)
library(writexl)
library(e1071)
#작업공간 ----
setwd("/Users/jeongjin-uk/Documents/R-kisti")
getwd()
install.packages("epiDisplay")
library(epiDisplay)
#작업공간 ----
setwd("/Users/jeongjin-uk/Documents/R-kisti")
getwd()
# 3. 모든 일변량 질적자료를 한 번에 분석하기.
diamonds %>%
purrr::keep(is.factor())
# 3. 모든 일변량 질적자료를 한 번에 분석하기.
diamonds %>%
purrr::keep(is.factor)
#빈도표와 같음..
epiDisplay::tab1(diamonds$cut)
#빈도표와 같음..
epiDisplay::tab1(diamonds$cut,
cum.percent = FALSE,
sort.group = "decreasing")
#빈도표와 같음..
epiDisplay::tab1(diamonds$cut,
cum.percent = FALSE,
sort.group  = "decreasing",
col         = "red")
#빈도표와 같음..
epiDisplay::tab1(diamonds$cut,
cum.percent = FALSE,
sort.group  = "decreasing",
col         = "purple")
diamonds %>%
purrr::keep(is.factor) %>%
purrr::map(epiDisplay::tab1)
diamonds %>%
purrr::keep(is.factor) %>%
purrr::map(epiDisplay::tab1)
install.packages("psych")
library(psych)
psych::describe(diamonds$carat)
psych::describe(diamonds$carat,trim = 0.05) #5% 절사평균을 의미.
diamonds %>%
purrr::keep(is.numeric)
diamonds %>%
purrr::keep(is.numeric) %>%
purrr::map_dfr(psych::describe)
library(writexl)
diamonds %>%
purrr::keep(is.numeric) %>%
purrr::map_dfr(psych::describe) %>%
writexl::write_xlsx(path = "summary.xlsx")
install.packages("DataExplorer")
library(DataExplorer)
DataExplorer::plot_str(diamonds)
DataExplorer::introduce(diamonds)
DataExplorer::plot_intro(diamonds)
DataExplorer::plot_bar(diamonds)
DataExplorer::plot_histogram(diamonds)
DataExplorer::plot_correlation(diamonds)
DataExplorer::create_report(diamonds)
source('~/Documents/R-kisti/11월 05일.R', encoding = 'EUC-KR', echo=TRUE)
diamonds %>%
dplyr::group_by(cut,color) %>%
dplyr::summarise(n = n())
diamonds %>%
dplyr::group_by(cut,color) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(percent = round((n/sum(n))*100, digits = 1))
install.packages("gmodels")
library(gmodels)
gmodels::CrossTable(diamonds$cut,diamonds$color)
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut, y = color))
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut, y = color)) +
ggplot2::geom_bar()
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut, fill = color)) +
ggplot2::geom_bar()
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut, fill = color)) +
ggplot2::geom_bar(position = "dodge")
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar()
#집단별 막대 그래프.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar() +
ggplot2::facet_wrap(~color) #집단은 무조건 질적자료 R 에서는 factor
#집단별 막대 그래프.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar() +
ggplot2::facet_wrap(~color,nrow = 1) #집단은 무조건 질적자료 R 에서는 factor
#집단별 막대 그래프.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar() +
ggplot2::facet_wrap(~color,nrow = 1,ncol = 7) #집단은 무조건 질적자료 R 에서는 factor
# nrow : 그래프를 보여주는 행의 갯수.
# ncol : 그래프를 보여주는 열의 갯수.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar() +
ggplot2::facet_wrap(~color,nrow = 7,ncol = 8)
# nrow : 그래프를 보여주는 행의 갯수.
# ncol : 그래프를 보여주는 열의 갯수.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut)) +
ggplot2::geom_bar() +
ggplot2::facet_wrap(~color+clarity,nrow = 7,ncol = 8)
# (1) 집단별 히스토그램.
diamonds %>%
ggplot2::ggplot(mapping = aes(x = carat)) +
ggplot2::geom_histogram(binwidth = 0.5) +
ggplot2::facet_wrap(~cut,nrow = 1,ncol = 5)
diamonds %>%
ggplot2::ggplot(mapping = aes(x = carat)) +
ggplot2::geom_histogram(binwidth = 0.5) +
ggplot2::facet_wrap(~cut + color,nrow = 5,ncol = 7)
#(2) 집단별 상자그림
diamonds %>%
ggplot2::ggplot(mapping = aes(y = carat))+
ggplot2::geom_boxplot(outlier.color = "red")
#(2) 집단별 상자그림
diamonds %>%
ggplot2::ggplot(mapping = aes(y = carat))+
ggplot2::geom_boxplot(outlier.color = "red") +
ggplot2::facet_wrap(~cut, nrow = 1,ncol = 5)
diamonds %>%
ggplot2::ggplot(mapping = aes(y = carat))+
ggplot2::geom_boxplot(outlier.color = "red") +
ggplot2::facet_wrap(~cut+color, nrow = 5,ncol = 7)
diamonds %>%
ggplot2::ggplot(mapping = aes(y = carat))+
ggplot2::geom_boxplot(outlier.color = "red")
diamonds %>%
ggplot2::ggplot(mapping = aes(y = carat,fill = cut))+
ggplot2::geom_boxplot(outlier.color = "red")
# (3) 집단별 기술통계량
diamonds %>%
dplyr::summarise(n      = n(),
Mean   = mean(carat),
Median = median(carat),
SD     = sd(carat),
MAD    = mad(carat))
diamonds %>%
dplyr::group_by(cut) %>%
dplyr::summarise(n      = n(),
Mean   = mean(carat),
Median = median(carat),
SD     = sd(carat),
MAD    = mad(carat))
diamonds %>%
dplyr::group_by(cut, color, clarity) %>%
dplyr::summarise(n      = n(),
Mean   = mean(carat),
Median = median(carat),
SD     = sd(carat),
MAD    = mad(carat))
diamonds %>%
dplyr::group_by(cut, color, clarity) %>%
dplyr::summarise(n      = n(),
Mean   = mean(carat),
Median = median(carat),
SD     = sd(carat),
MAD    = mad(carat)) %>%
writexl::write_xlsx(path = "summury_by.xlsx")
diamonds %>%
dplyr::group_by(cut, color, clarity) %>%
dplyr::summarise(n      = n(),
Mean   = mean(carat),
Median = median(carat),
SD     = sd(carat),
MAD    = mad(carat)) %>%
dplyr::arrange(desc(Mean)) %>%
writexl::write_xlsx(path = "summury_by.xlsx")
psych::describeBy(diamonds$carat,
group = diamonds$cut,
mat   = TRUE)
psych::describeBy(purrr::keep(diamonds,is.numeric),
group = diamonds$cut,
mat = TRUE)
diamonds %>%
dplyr::sample_frac(size = 0.1)
diamonds %>%
dplyr::sample_frac(size = 0.1) %>%
ggplot2::ggplot(mapping = aes(x = carat, y = price))
diamonds %>%
dplyr::sample_frac(size = 0.1) %>%
ggplot2::ggplot(mapping = aes(x = carat, y = price)) +
ggplot2::geom_point()
diamonds %>%
dplyr::sample_frac(size = 0.1) %>%
ggplot2::ggplot(mapping = aes(x = carat, y = price)) +
ggplot2::geom_point(col = "red")
diamonds %>%
dplyr::sample_frac(size   = 0.1) %>%
ggplot2::ggplot(mapping   = aes(x = carat, y = price)) +
ggplot2::geom_point(col   = "red",
size  = 0.5,
shape = 2)
diamonds %>%
dplyr::sample_frac(size   = 0.1) %>%
ggplot2::ggplot(mapping   = aes(x = carat, y = price)) +
ggplot2::geom_point(col   = "red",
size  = 0.5,
shape = 2,
alpha = 0.7)
diamonds %>%
dplyr::sample_frac(size   = 0.1) %>%
ggplot2::ggplot(mapping   = aes(x = carat, y = price)) +
ggplot2::geom_point(col   = "red",
size  = 0.5,
shape = 2,
alpha = 0.7)  +
ggplot2::facet_wrap(~cut)
install.packages("GGally")
library(GGally)
diamonds %>%
purrr::keep(is.numeric) %>%
GGally::ggpairs()
diamonds %>%
dplyr::sample_frac(size = 0.1) %>%
purrr::keep(is.numeric) %>%
GGally::ggpairs()
# cor(data$variable, data$variable, method = "pearson")
cor(diamonds$carat,diamonds$price, method = "pearson")
diamonds %>%
purrr::keep(is.numeric) %>%
cor(method = "pearson")
diamonds %>%
purrr::keep(is.numeric) %>%
cor(method = "pearson") %>%
round(digits = 3)
knitr::opts_chunk$set(echo = TRUE)
diamonds %>%
ggplot2::ggplot(mapping = aes(x = cut))+
ggplot2::geom_bar(col = "purple")
diamonds %>%
purrr::keep(is.factor) %>%
purrr::map(epiDisplay::tab1)
